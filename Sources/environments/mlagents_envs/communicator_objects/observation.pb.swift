// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mlagents_envs/communicator_objects/observation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CommunicatorObjects_CompressionTypeProto: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case png // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .png
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .png: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CommunicatorObjects_CompressionTypeProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CommunicatorObjects_CompressionTypeProto] = [
    .none,
    .png,
  ]
}

#endif  // swift(>=4.2)

struct CommunicatorObjects_ObservationProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shape: [Int32] = []

  var compressionType: CommunicatorObjects_CompressionTypeProto = .none

  var observationData: CommunicatorObjects_ObservationProto.OneOf_ObservationData? = nil

  var compressedData: Data {
    get {
      if case .compressedData(let v)? = observationData {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {observationData = .compressedData(newValue)}
  }

  var floatData: CommunicatorObjects_ObservationProto.FloatData {
    get {
      if case .floatData(let v)? = observationData {return v}
      return CommunicatorObjects_ObservationProto.FloatData()
    }
    set {observationData = .floatData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ObservationData: Equatable {
    case compressedData(Data)
    case floatData(CommunicatorObjects_ObservationProto.FloatData)

  #if !swift(>=4.1)
    static func ==(lhs: CommunicatorObjects_ObservationProto.OneOf_ObservationData, rhs: CommunicatorObjects_ObservationProto.OneOf_ObservationData) -> Bool {
      switch (lhs, rhs) {
      case (.compressedData(let l), .compressedData(let r)): return l == r
      case (.floatData(let l), .floatData(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct FloatData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: [Float] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "communicator_objects"

extension CommunicatorObjects_CompressionTypeProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "PNG"),
  ]
}

extension CommunicatorObjects_ObservationProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObservationProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shape"),
    2: .standard(proto: "compression_type"),
    3: .standard(proto: "compressed_data"),
    4: .standard(proto: "float_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.shape)
      case 2: try decoder.decodeSingularEnumField(value: &self.compressionType)
      case 3:
        if self.observationData != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.observationData = .compressedData(v)}
      case 4:
        var v: CommunicatorObjects_ObservationProto.FloatData?
        if let current = self.observationData {
          try decoder.handleConflictingOneOf()
          if case .floatData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.observationData = .floatData(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shape.isEmpty {
      try visitor.visitPackedInt32Field(value: self.shape, fieldNumber: 1)
    }
    if self.compressionType != .none {
      try visitor.visitSingularEnumField(value: self.compressionType, fieldNumber: 2)
    }
    switch self.observationData {
    case .compressedData(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    case .floatData(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommunicatorObjects_ObservationProto, rhs: CommunicatorObjects_ObservationProto) -> Bool {
    if lhs.shape != rhs.shape {return false}
    if lhs.compressionType != rhs.compressionType {return false}
    if lhs.observationData != rhs.observationData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommunicatorObjects_ObservationProto.FloatData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CommunicatorObjects_ObservationProto.protoMessageName + ".FloatData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedFloatField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitPackedFloatField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommunicatorObjects_ObservationProto.FloatData, rhs: CommunicatorObjects_ObservationProto.FloatData) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
