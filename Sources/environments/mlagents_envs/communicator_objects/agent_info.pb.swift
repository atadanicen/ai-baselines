// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mlagents_envs/communicator_objects/agent_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CommunicatorObjects_AgentInfoProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reward: Float = 0

  var done: Bool = false

  var maxStepReached: Bool = false

  var id: Int32 = 0

  var actionMask: [Bool] = []

  var observations: [CommunicatorObjects_ObservationProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "communicator_objects"

extension CommunicatorObjects_AgentInfoProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AgentInfoProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .same(proto: "reward"),
    8: .same(proto: "done"),
    9: .standard(proto: "max_step_reached"),
    10: .same(proto: "id"),
    11: .standard(proto: "action_mask"),
    13: .same(proto: "observations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 7: try decoder.decodeSingularFloatField(value: &self.reward)
      case 8: try decoder.decodeSingularBoolField(value: &self.done)
      case 9: try decoder.decodeSingularBoolField(value: &self.maxStepReached)
      case 10: try decoder.decodeSingularInt32Field(value: &self.id)
      case 11: try decoder.decodeRepeatedBoolField(value: &self.actionMask)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.observations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reward != 0 {
      try visitor.visitSingularFloatField(value: self.reward, fieldNumber: 7)
    }
    if self.done != false {
      try visitor.visitSingularBoolField(value: self.done, fieldNumber: 8)
    }
    if self.maxStepReached != false {
      try visitor.visitSingularBoolField(value: self.maxStepReached, fieldNumber: 9)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 10)
    }
    if !self.actionMask.isEmpty {
      try visitor.visitPackedBoolField(value: self.actionMask, fieldNumber: 11)
    }
    if !self.observations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.observations, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommunicatorObjects_AgentInfoProto, rhs: CommunicatorObjects_AgentInfoProto) -> Bool {
    if lhs.reward != rhs.reward {return false}
    if lhs.done != rhs.done {return false}
    if lhs.maxStepReached != rhs.maxStepReached {return false}
    if lhs.id != rhs.id {return false}
    if lhs.actionMask != rhs.actionMask {return false}
    if lhs.observations != rhs.observations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
