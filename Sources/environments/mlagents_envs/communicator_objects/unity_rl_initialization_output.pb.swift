// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mlagents_envs/communicator_objects/unity_rl_initialization_output.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The request message containing the academy's parameters.
struct CommunicatorObjects_UnityRLInitializationOutputProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  /// Communication protocol version that the responding side (typically the C# environment) is using.
  var communicationVersion: String = String()

  var logPath: String = String()

  var brainParameters: [CommunicatorObjects_BrainParametersProto] = []

  /// Package/library version that the responding side (typically the C# environment) is using.
  var packageVersion: String = String()

  /// The RL Capabilities of the C# package.
  var capabilities: CommunicatorObjects_UnityRLCapabilitiesProto {
    get {return _capabilities ?? CommunicatorObjects_UnityRLCapabilitiesProto()}
    set {_capabilities = newValue}
  }
  /// Returns true if `capabilities` has been explicitly set.
  var hasCapabilities: Bool {return self._capabilities != nil}
  /// Clears the value of `capabilities`. Subsequent reads from it will return its default value.
  mutating func clearCapabilities() {self._capabilities = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _capabilities: CommunicatorObjects_UnityRLCapabilitiesProto? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "communicator_objects"

extension CommunicatorObjects_UnityRLInitializationOutputProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnityRLInitializationOutputProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "communication_version"),
    3: .standard(proto: "log_path"),
    5: .standard(proto: "brain_parameters"),
    7: .standard(proto: "package_version"),
    8: .same(proto: "capabilities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.communicationVersion)
      case 3: try decoder.decodeSingularStringField(value: &self.logPath)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.brainParameters)
      case 7: try decoder.decodeSingularStringField(value: &self.packageVersion)
      case 8: try decoder.decodeSingularMessageField(value: &self._capabilities)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.communicationVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.communicationVersion, fieldNumber: 2)
    }
    if !self.logPath.isEmpty {
      try visitor.visitSingularStringField(value: self.logPath, fieldNumber: 3)
    }
    if !self.brainParameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.brainParameters, fieldNumber: 5)
    }
    if !self.packageVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.packageVersion, fieldNumber: 7)
    }
    if let v = self._capabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommunicatorObjects_UnityRLInitializationOutputProto, rhs: CommunicatorObjects_UnityRLInitializationOutputProto) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.communicationVersion != rhs.communicationVersion {return false}
    if lhs.logPath != rhs.logPath {return false}
    if lhs.brainParameters != rhs.brainParameters {return false}
    if lhs.packageVersion != rhs.packageVersion {return false}
    if lhs._capabilities != rhs._capabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
